
// Douglas Neiva - Learning Notes - Programming Language - Modern C++
// ====================================================================================================
// >>>  Learning Notes - Modern C++  ==================================================================


// ====================================================================================================
   >>> Introduction

Classical C++ [ C++98 ] works with arrays, pointers and inheritance [ C with classes ]
C++ foundation: arrays, strings, vectors, iterators, templates

Modern C++ comes into standardized versions:
ISO/IEC 14882:1998 - C++98
ISO/IEC 14882:2011 - C++11
ISO/IEC 14882:2014 - C++14
ISO/IEC 14882:2017 - C++17
ISO/IEC 14882:2020 - C++20


       >> C++11 / C++14 / C++17 main features

nullptr
Operator overloading
Lambda Expressions
Inheritance
Excepctions and RAII
Move Semantics
Compile-time programming
Files and streams
Smart pointers
Standard Template Library [STL] algorithms
Standard Template Library [STL] containers


       >> C++20 new main features

Concepts
Modules
Coroutines
Ranges


   >>> Resource Management on C++ software

C++ software often use special Classes to deal with machine's resources, like:  files, database connections, GUI windows, memory, threads, etc
All the resources used by C++ class's objects should be managed by the C++ developer, according to the resource nature:

    - To create a resource, the C++ developer needs to do it efficiently and manage its lifetime
    - To use a resource, the C++ developer needs to allocate, open or acquire
    - To close a resource after using it, the C++ developer needs to release or close
    - For every resource used, the C++ developer needs to think about if it's efficient to make a copy [value semantics]
    - On every resource situation, the C++ developer needs to think about error handling

C++ has 4 main concepts from Object-Oriented-Programming: Abstraction, Encapsulation, Inheritance and Polymorphism

The Standard Library Classes [ 'string' and 'vector' for allocated memory, 'fstream' for files, and objects used in multi-threading ] follows the 'Encapsulation' rule to manage Class's resources
[ the details of mananing the resource are written inside the class, and the C++ developer always use the public member functions [ Class's interface ] instead of dealing with the resource directly ]

C++ classes which manage a resource follows a common structure [ known as 'RAII Programming Idiom' = Resource Acquisition Is Initialization ]:

    - the resource is stores as a private data member of the class
    - the class's constructor 'acquires'/'opens' the resource
    - the class's interface [ public member functions ] controls the access to the resource [ encapsulation ]
    - the class's destructor 'releases'/'closes' the resource
*The RAII means that the class's object creation will acquire a copy of the resource and manage it, releasing the resource when the class's object is destroyed
*RAII has some advantages: obtain access to the resource, use the resource and release the resource is straightforward and deterministic [ same input will result on same output ],
 meaning that the object could either be successfully created or invalid for use, and only one object can only own a given resource at a time [ a given resource cannot be used by multiple objects ],
 but one object can close a given resource and then can be reassigned to another resource
*When an object is copied or assigned to, the target object [ the result of the operation ] acquires its own version of the resource

       >> Class's Resource Management

                 > fstream

The 'fstream' class 'encapsulates' the details of how to manage a file, and to use a file on C++ software, the developer only needs to use the 'fstream' class's interface [ public member functions ]
    - give the name of the file on the 'fstream' object's constructor [ class's object initialization ]
    - use the overloaded 'left-shift <<' and the 'right-shift >>' operators for inputs / outputs
    - close the file when it's no longer needed
*By using the 'fstream' class and its interface with a 'fstream' object, the C++ developer doesn't need to know how to 'read from a file' or 'write to a file' directly
*By using a class's object, its lifetime will act like a normal variable, being deleted when it goes out of scope [ and class's objects will call its destructor member-function when deleted,
 releasing the resource when it goes out of scope or when an exception is thrown ]







// ====================================================================================================
       >> Review of Classical C++

Variable scope inside {}

Pass by value [less efficient, creates memory overhead, copies the variable to a function] - int func(int Y); return Y
    the copied variable scope is the function body, and the returned variable is also copied

Pass by address [uses a pointer pointing to the addres of the variable to be changed] - void func(int *Y)
    the addressed variable will be used within the function scope, without needing a return type

Pass by reference [more efficient, uses the addres of the variable to be changed, commonly used as out parameters] - void func(int& Y)
    the addressed variable will be used within the function scope, without needing a return type

Pass by const reference [uses the addres of the variable to be changed, read-only] - void func(const CustomClass& Z)
    the addressed variable will be used within the function scope, without needing a return type

C++ uses Value Semantics by default [doesn't have a garbage collector, unlike languages with Reference Semantics]
    arguments are passed by value, initialization creates an entirely new object
    objects exists only within a scope
C++ can also use Reference Semantics
    arguments can be passed by reference, and initialization can create an alias [Pseudonym] to an existing object [references and pointers]
    heap-allocated objects can exist beyond the end of the scope, but must be deallocated manually by the developer [Modern C++ mitigates this by using smart pointers]

C++ structs are the same as classes only with variables, but all the variables are public by default

Object Oriented Programming

Classes: a class is a compound data structure with properties [variable] and methods [functions], and access to class's members are private by default
[only class's objects can access private members], but class members can be made "public" or "protected" [a public member can be accessed by any code on any time]
The public members provide the interface of the class - "What it does"
The private members provide the implementation of the class - "How it does it"

Member functions are implemented as global functions, with the class name followed by the "::" [scope resolution operator]
When a member function is called on an class's object, the object is passed by address in a hidden argument, and the pointer to the object is available as "this" variable
Dereferencing "this" gives access to members of the object [variables and functions]

Special member functions are functions related to the class, like constructor and destructor member functions, sometimes created automatically by the compiler to manage objects lifetime
Classical C++ has 4 special member functions:
    Constructor: has the same name of the class, used to initialize new objects, gets called immediately after crating a new object
    Copy Constructor: similar to the constructos, but uses another object for initialization
    Assignment operator: assigns an existing object from another object and returns a reference to the assigned object
    Destructor: has the same name of the class with the tilde ~ prefix symbol, used to clean objects before deletion from the memory, gets called immediately before destroying an object

A pointer is a variable that contains a memory address [it can be either on the stack or on the heap]
To allocate memory on the heap [and use the variable beyond its scope], use the "new" operator [that returns the address of the allocated memory], and this will call the default constructor
Memory allocated on the heap must be cleaned manually by the developer [otherwise the C++ program will cause memory leaks]

"Memory Leak" is when a local variable stored on the stack [the pointer] receives the address of a new dynamically-allocated variable on the heap, and gets destroyed at the end of the scope,
so the address of the memory on the heap will be lost and the space allocated for the variable on the heap is no longer accessible to be cleaned [the pointer allocated on the stack
should be used to clean {deallocate} the variable allocated on the heap before it gets destroyed]

To deallocate heap memory, use the "delete" statement followed by the pointer that points to the variable on the heap [this will call the destructor of the variable, and the pointer
is now a "dangling pointer" [that points to unknown data], and attempting to access it will result in undefined behaviors [most commonly, crashes]
For every "new" operation, should be a "delete" operation; to dynamically allocate arrays "int* pa = new int[20]", use "delete[] pa" to deallocate arrays

Arrays are blocks of "contiguous" memory [no gaps between elements] with specified length and indexed elements, used for faster access to memory; but can be dynamic arrays
[allocated on the heap] when the developer dont know what is the length of the array [like strings] or if the array size will vary over time [like strings], and must be deleted to release memory

String implementation in C was done by using arrays of const char, where each element is a character of the string with an extra "null character" element to detect the end of the string
String literals are C-style strings [const char *str = "Hello"; the same as const char str[] = {'H', 'e', 'l', 'l', 'o', '\0'};]
C++ have a standard library for strings [std::string] that uses a dynamic array and a member variable to store the number of elements to initialize the array
C++ also have a standard library for vectors [std::vector] that is similar to the std::string, but instead of using characters, vectors can store data of any single type
    strings and vectors have subscript notation [using the square brackets to read/write elements by its index, starting from 0] and the "size()" member function that retuns the number of elements
    vectors [also dynamically allocated] have the "push_back(n)" function to store a new "n" value at the end of the structure


// ====================================================================================================
       >> Introduction to Modern C++

On Classical C++, the NULL statement was used to represent the number 0, but C++11 replaces it will nullptr [a pointer that points to zero], avoiding bugs among several compilers
While NULL is an integer type [and have different interpretation between compilers], the new standard nullptr can be converted to any pointer type, but cannot be converted to an integer
C++ does not have a standard graphics library!

   >>> NASA space-proof code - The 10 rules to avoid crashes

"The Power of Ten" is a set of 10 rules to create safe environment for code
 1  - Simple Control Flow: don't use re-direct flow-of-control statements [goto, setjmp, longjmp], and don't use function recursion [the function calling itself]
 2  - Limit All Loops to a fixed statically-typed upper-bound [avoiding infinite-loops, even when the loop is large enough, create a defined number of iterations, represented by an integer]
 3  - Never use the Heap memory and dynamically-alocation statements [malloc, free], avoiding memory leaks, use-after-free and heap overflows, using deterministic memory usage
 4  - Limit Function Size: according to SOLID principles, a function should do just one thing, always capable to be tested as a single unit [unit-tests]
 5  - Data hiding: restrict access to data that is on the lowest scope of the application, maintaining data integrity
 6  - Always check return values for non-void functions
 7  - Limit the Preprocessor by using flags and conditional compilation [used on multi-platform softwares]
 8  - Restrict pointers use
 9  - Never use function pointers
 10 - Be Pedantic when compiling the code


   >>> Section 02

       >> Cellular Automata / Cellular Automaton

The "way of thinking" when it comes to computation and software development Takes into account the "Conway's Game of Life"
(devised by John Conway in 1970 and popularized by Martin Gardner in "Scientific American" magazine)


          > 1D-CA (Cellular Automaton) principles

A "cellular automaton" (CA) is a grid of cells (like an array), and each cell is defined as an entity or state (like binary state) and a neighborhood (nearest cells)
How the cell state changes over time is going to be determined by the neighborhood previous states (nearest cells)
The simplest Cellular automaton is an array of cells, each cell with binary states, and its neighborhood being the 3 adjacent cells (the cell itself and the closer cells),
and the simplest cell state at a current time will be a function based on the neighbors cell states at a previous time (the function is called "rule-set" [like the random "rule 30"])
The output of a cellular automaton is an image with all the "generations" (each generation is a rul-eset compute time) stacked together (the next generation below the previous one)

Wolfram rule-set Classifications
- Uniformity
- Oscillation (or repetition)
- Random
- Complexity


          > 2D-CA (Cellular Automaton) example "7.2" - The Game of Life

While 1D-CAs produces a vertical (or horizontal) scrolling image (by stacking all the generations on top of each other, each generation is also a 1D output),
a 2D-CA ir a grid of cells (not an array, like 1D cells) produces a 2D output, meaning that a 2D-CA can generate images over time (and a frame-rate can be used to output a video)
While 1D-CAs behaviors are defined by a rule-set, 2D-CAs and 3D-CAs are defined by "generality" (a more simpler type of "rule" that controls Death [1 to 0], Birth [0 to 1] and Remain-State)


       >> Conway's Game of Life

A "Cellular Automata" can be used to model natural processes [like biology and physics], and it's "turing-complete", [it means that it can solve any computational problem,
like cryptography and neural networks], "emergent system" [the whole is greater than the sum of the parts] and "self-organizing system"
The game of life is played by a computer, following a "rule-set" on 1D or a "generality" on 2D, and the grid advances from next generations


       >> ANSI Escape Codes

ANSI defined a set of commands for controlling terminals and change the way output is displayed on the terminal
Example: following the ASCII table, the "escape" key has the hexadecimal equivalent of "0x1B", used at the beggining of an ANSI terminal command
    - Move the cursor to row N, column M and display a character X:  0x1B[N;MX
    - Clear the screen and return the cursor to home [top-left]:  0x1B[2J

